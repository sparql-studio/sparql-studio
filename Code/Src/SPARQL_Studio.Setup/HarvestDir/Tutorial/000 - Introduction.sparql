# 000. Introduction
# -----------------
# 
# Welcome to SPARQL Studio. This tutorial is a collage of original stuff, 
# integrated with material from the nice SPARQL by Example tutorial by
# Cambridge Semantics (available at http://www.w3.org/2009/Talks/0615-qbe/)
# 
# This tutorial is licensed under the  Creative Commons Attribution-Share Alike 3.0 
# Unported License (http://creativecommons.org/licenses/by-sa/3.0/) with attribution
# to Antonello Salvatucci.
# 
# Why SPARQL?
# 
# SPARQL is a query language that allows us to query RDF data.
# 
# Every piece of RDF data is made up of a TRIPLE: 
# SUBJECT - PREDICATE - OBJECT
#
# The SUBJECT is what are we referring to
# The PREDICATE identifies a property that the subject has
# The OBJECT is the VALUE of that property
# 
# The subject and the predicate are always represented by URIs, while
# the object can be a literal.
# 
# For example, the Dbpedia RDF repository stores the birthdate of Tim Berners-Lee
# (inventor of the world wide web and proponent of the semantic web) like this:
#
# <http://dbpedia.org/resource/Tim_Berners-Lee> 
# <http://dbpedia.org/ontology/birthDate>
# 1955-06-08
#
# To query for TBL's birth date, we can write a SPARQL query that looks like the
# following:
# 

SELECT ?birthDate WHERE
{
	<http://dbpedia.org/resource/Tim_Berners-Lee> <http://dbpedia.org/ontology/birthDate> ?birthDate 
}

# If you have ever seen some sort of SQL language, this probably looks familiar 
# to you. Basically, what we are trying to achieve here is to select all the RDF 
# triples that have the given subject (Tim Berners-Lee) and predicate (birth date)
# and put the results in a column variable called ?birthDate.
#
# (Variable names in SPARQL are always prefixed with a ? sign.) 
#
# Go ahead, run the query. Make sure that the DBPedia endpoint is selected in the 
# application toolbar, and click the Run Query button above. This will run the
# query on the remote SPARQL server at dbpedia.org (more on SPARQL remote endpoints
# later).
#
# Done? Congratulations! You just ran your first SPARQL query. 
# 
# Now, look at the result window. Obviously the resulting table contains only one
# column (because this is all that we asked) and one line (because the entity 
# <http://dbpedia.org/resource/Tim_Berners-Lee> has only one 
# <http://dbpedia.org/ontology/birthDate> value. 
#
