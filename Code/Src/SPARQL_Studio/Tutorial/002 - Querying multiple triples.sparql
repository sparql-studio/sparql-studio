# 002. Querying multiple triples
# ------------------------------
# 
# A query with just a triple is not much fun. The beauty of SPARQL is that it
# provides a simple way to intersect multiple triples.
# 
# As an example, let's take the following query:
#

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/> # Friend of a Friend (FOAF) vocabulary
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbprop: <http://dbpedia.org/property/>

SELECT ?subject WHERE
{
	?subject rdf:type foaf:Person .
	?subject rdf:type dbo:SoccerPlayer .
	?subject dbprop:position dbr:Midfielder .
	?subject dbprop:clubs dbr:A.S._Roma .
}

# 
# Above, we are asking the RDF repository to deliver us the subjects that 
# belong to all the given triples, i.e. the subjects that fulfill the 
# given conditions -- which are:
#
# 1. the subject is of type <person> 
# 2. the subject is if type <soccer player>
# 3. the subject has a <position> property with the value <midfielder>
# 4. the subject has a <clubs> propery with the value <A.S._Roma>.
# 
# In other words, we are looking for:
# 
# 1. All persons
# 2. Who also are (or have been) soccer players
# 3. Who play (or have played) as midfielders
# 4. Who play (or have played) for the AS Roma soccer club. 
#
# NOTE: Have you noticed the dots (.) at the end of each line inside the SELECT
# statement? That is a separator needed to divide the different triple patterns
# specified in the query. More on that in the next script.
# 

